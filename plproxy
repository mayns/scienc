-- PL/PROXY SETUP

cd gen/scienc/db/
sudo tar -zxvf plproxy-2.5.tar.gz -C /opt/db/plproxy
cd /opt/db/plproxy
make
make install


â€”-ON PROXY server after science creation

sudo su postgres
psql -f /opt/db/plproxy/plproxy-2.5/sql/plproxy.sql science
psql science

create schema plproxy;

CREATE OR REPLACE FUNCTION plproxy.get_cluster_partitions(cluster_name text)
RETURNS SETOF text AS $$
BEGIN
    IF cluster_name = 'science_cluster' THEN
        RETURN NEXT 'dbname=science_1 host=188.44.43.21';
        RETURN NEXT 'dbname=science_2 host=188.44.43.22';
        RETURN;
    END IF;
    RAISE EXCEPTION 'Unknown cluster';
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION plproxy.get_cluster_version(cluster_name text)
RETURNS int4 AS $$
BEGIN
    IF cluster_name = 'science_cluster' THEN
        RETURN 1;
    END IF;
    RAISE EXCEPTION 'Unknown cluster';
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION plproxy.get_cluster_config(
    in cluster_name text,
    out key text,
    out val text)
RETURNS SETOF record AS $$
BEGIN
    -- lets use same config for all clusters
    key := 'connection_lifetime';
    val := 30*60; -- 30m
    RETURN NEXT;
    RETURN;
END;
$$ LANGUAGE plpgsql;

CREATE FOREIGN DATA WRAPPER plproxy;


-- define real node's ip

CREATE SERVER science_cluster FOREIGN DATA WRAPPER plproxy
OPTIONS (connection_lifetime '1800',
         p0 'dbname=science_1 host=188.44.43.21',
         p1 'dbname=science_2 host=188.44.43.22');


CREATE USER MAPPING FOR postgres SERVER science_cluster;

GRANT USAGE ON FOREIGN SERVER science_cluster TO postgres;


CREATE OR REPLACE FUNCTION execute_query (id text, query text)
RETURNS void AS $$
    CLUSTER 'science_cluster';
    RUN ON hashtext(id);
$$ LANGUAGE plproxy;


CREATE OR REPLACE FUNCTION get_query (query text)
RETURNS SETOF text AS $$
    CLUSTER 'science_cluster';
    RUN ON ALL;
$$ LANGUAGE plproxy;



-- ON NODES
-- create science db and projects table

sudo su postgres
psql

-- if not created

create database science_1; -- on node_1
create database science_2; -- on node_2

\connect science_1; -- on node_1
\connect science_2; -- on node_2

CREATE TABLE projects (id text primary key, research_fields text[], title text, description_short text);

CREATE OR REPLACE FUNCTION execute_query (id text, query text)
RETURNS void AS $$
BEGIN
    EXECUTE query;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION get_query (query text)
RETURNS SETOF text AS $$
DECLARE t text;
BEGIN
    FOR t in EXECUTE query LOOP
        RETURN NEXT t;
    END LOOP;
    RETURN;
END;
$$ LANGUAGE plpgsql;